buildscript {
    // Current swarm version in local maven repo for plugin
    version = '1.0.0.Alpha4-SNAPSHOT'
    repositories {
        mavenLocal()
    }
    dependencies {
        classpath "org.wildfly.swarm:wildfly-swarm-plugin:$version"
    }
}

apply plugin: 'wildfly-swarm'
apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8

swarm {
    properties {
        jboss.http.port = 8181
        java.library.path = '/usr/local/lib'
    }
}

mainClassName = 'org.jboss.rhiot.beacon.swarm.SwarmMain'

repositories {
    mavenCentral()
    // Current swarm version in local maven repo for modules
    mavenLocal()
    maven {
        // For MQTT library
        url "https://repo.eclipse.org/content/repositories/paho-releases/"
    }
}

dependencies {
    compile 'com.beust:jcommander:1.35'
    compile 'org.eclipse.paho:mqtt-client:0.4.0'
    compile "org.jboss.logging:jboss-logging:3.1.4.GA"
    compile 'org.jboss.logmanager:jboss-logmanager:1.5.4.Final'
    compile 'com.google.code.gson:gson:2.3.1'
    compile "org.wildfly.swarm:wildfly-swarm-msc:$version"

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

ext.commandString = { List<String> cmdLine->
    StringBuilder info = new StringBuilder();
    for (String s : cmdLine) {
        info.append(s);
        info.append(' ');
    }
    return info.toString();
}

task runJavaScannerHCIDump(type: JavaExec, dependsOn: classes) {
    main = 'org.jboss.rhiot.beacon.bluez.HCIDump'
    systemProperty "java.library.path", "/usr/local/lib"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}
runJavaScannerHCIDump.doFirst {
    println(commandString(commandLine))
    println("Output:\n")
}

task runJavaScanner(type: JavaExec, dependsOn: classes) {
    main = 'Main'
    systemProperty "java.library.path", "/usr/local/lib"
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}
runJavaScanner.doFirst {
    println(commandString(commandLine))
    println("Output:\n")
}

task runTestUptime(type: JavaExec, dependsOn: testClasses) {
    main = 'TestUptime'
    classpath sourceSets.test.runtimeClasspath
}
